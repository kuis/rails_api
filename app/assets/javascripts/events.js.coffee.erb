jQuery ->
	transitionalMessages = {
		yes: ['Great!', 'Nice work.', 'All set.', 'Like it.', 'Looks great.', 'Sounds good.', 'Looks good!'],
		skip: ['No problem, you can add at any time.', 'You can always add these later.', 'Always here if you need to add later.', 'No problem.', 'Maybe later.']
	}

	$(document).delegate ".task-completed-checkbox", "click", ->
		$(@form).submit()


	showStep = (target, message) ->
		return unless target
		guidedBarNav = $('.guide-bar.event-details-scroll-spy')
		$li = guidedBarNav.find("li>a[data-spytarget=\"#{target}\"]").parent('li')
		$('body').scrollmultispy('activate', [target, guidedBarNav])
		if $li.length > 0
			$li.find('.transitional-message').text(message + ' ').end().on 'deactivate', () ->
				$(this).find('.transitional-message').text('')

	showNextStepYes = (currentStep) ->
		guidedBarNav = $('.guide-bar.event-details-scroll-spy')
		target = guidedBarNav.find("a[data-spytarget=\"#{currentStep}\"]").parent('li').data('next')
		message = transitionalMessages.yes[Math.floor(Math.random()*transitionalMessages.skip.length)]
		showStep target, message

	showPrevStepYes = (currentStep) ->
		guidedBarNav = $('.guide-bar.event-details-scroll-spy')
		target = guidedBarNav.find("a[data-spytarget=\"#{currentStep}\"]").parent('li').data('prev')
		message = transitionalMessages.yes[Math.floor(Math.random()*transitionalMessages.skip.length)]
		showStep target, message

	$(document).on 'smooth-scroll:end', 'a.step-skip-link', () ->
		target = $(this).parent('li').data('next')
		message = transitionalMessages.skip[Math.floor(Math.random()*transitionalMessages.skip.length)]
		showStep target, message

	$(document).on 'smooth-scroll:end', 'a.step-back-link', () ->
		target = $(this).parent('li').data('prev')
		message = transitionalMessages.skip[Math.floor(Math.random()*transitionalMessages.skip.length)]
		showStep target, message

	$(document).on 'contact:added', () ->
		showNextStepYes '#event-contacts'
		showPrevStepYes '#event-contacts'
	$(document).on 'task:added', () ->
		showNextStepYes '#event-tasks'
		showPrevStepYes '#event-tasks'
	$(document).on 'document:added', () ->
		showNextStepYes '#event-documents'
		showPrevStepYes '#event-documents'
	$(document).on 'per:completed', () ->
		showNextStepYes '#event-per'
		showPrevStepYes '#event-per'
	$(document).on 'activity:added', () ->
		showNextStepYes '#event-activities'
		showPrevStepYes '#event-activities'
	$(document).on 'expense:added', () ->
		showNextStepYes '#event-expenses'
		showPrevStepYes '#event-expenses'
	$(document).on 'photo:added', () ->
		showNextStepYes '#event-photos'
		showPrevStepYes '#event-photos'
	$(document).on 'comment:added', () ->
		showNextStepYes '#event-comments'
		showPrevStepYes '#event-comments'

	$("#reject-post-event").submit (e) ->
		e.preventDefault()
		$form = $(this)
		bootbox.classes('modal-med rejection-prompt')
		bootbox.prompt "Why is the post event being rejected?", 'Cancel', 'Submit', (result) ->
			if result isnt null and result isnt ""
				$.ajax $form.attr("action"),
					method: "PUT"
					dataType: "script"
					data:
						reason: result
			else if result isnt null
				bootbox.alert "You must enter a reason for the rejection", ->
					$form.submit()

		false

	$(document).delegate 'a.load-comments-link', 'click', (e) ->
		$row = $(this).parents('li');
		if $("##{$row.attr('id')}_comments").length > 0
			$("##{$row.attr('id')}_comments").toggle()
			e.stopImmediatePropagation()

		else
			$(this).removeAttr('data-remote')

		e.preventDefault();
		return false


	$('.submit-event-data-link').on 'ajax:before.event_data', () ->
		link = $(this)
		form = $('form.event-data-form')
		if form.length
			if form.valid()
				$(document).off('ajaxComplete.event_data').on 'ajaxComplete.event_data', (event, xhr, settings) ->
					$(document).off('ajaxComplete.event_data')
					$('.submit-event-data-link').off('ajax:before.event_data')
					link.trigger('click')
				form.submit()
			false
		else
			true


	mapIsVisible = false
	calendarIsVisible = false
	calendarCreated = false
	# EVENTS INDEX

	window.createCalendar = (month = null, year = null, groupBy = null) ->
		$('#calendar-canvas').eventsCalendar
			month: month
			year: year
			groupBy: groupBy
			eventsUrl: () ->
				url = $('#calendar-canvas').data('events-url')
				url += (if url.indexOf('?') >= 0 then '&' else '?') + $('#collection-list-filters').filteredList('paramsQueryString')
				url
			renderMonthDay: (day) ->
				date = "#{day.getMonth()+1}/#{day.getDate()}/#{day.getFullYear()}"
				"<a class=\"cal-day-link\" data-date=\"#{date}\" href=\"#{document.location.protocol}//#{document.location.host}/events?start_date=#{date}&end_date=\">#{day.getDate()}</a>"
			onEventsLoad: () ->
				$('#pdf-export').data('url', "/events.pdf?mode=calendar&month=#{$('#calendar-canvas').eventsCalendar('getMonth')}&year=#{$('#calendar-canvas').eventsCalendar('getYear')}&group_by=#{$('#calendar-canvas').eventsCalendar('getGroupBy')}")
				setTimeout () ->
					window.status='completed';
				, 100
			onMonthChange: (month, year) ->
				$('#pdf-export').data('url', "/events.pdf?mode=calendar&month=#{month}&year=#{year}&group_by=#{$('#calendar-canvas').eventsCalendar('getGroupBy')}")
			onGroupChange: (groupBy) ->
				$('#pdf-export').data('url', "/events.pdf?mode=calendar&month=#{$('#calendar-canvas').eventsCalendar('getMonth')}&year=#{$('#calendar-canvas').eventsCalendar('getYear')}&group_by=#{groupBy}")


	$('#toggle-events-view a').on 'click', ->
		$('#toggle-events-view a').removeClass 'active'
		$(this).addClass('active').tab 'show'
		if $(this).attr('href') is '#map-view'
			$('#pdf-export').data('url', '/events.pdf');
			mapIsVisible = true
			calendarIsVisible = false
			$('.help-title').hide()
			$('.help-title-map').show()
			$('body.events.index #collection-list-filters').filteredList 'disableScrolling'
			$('.dates-range-filter').slideDown()
			$('.dates-pref').slideDown()
			$('.collection-list-description').find('[data-filter="date"]').closest('.filter-item').show()
			initializeMap()
		else if $(this).attr('href') is '#calendar-view'
			$('#pdf-export').data('url', '/events.pdf?mode=calendar')
			$('.dates-range-filter').slideUp()
			$('.dates-pref').slideUp()
			$('.collection-list-description').find('[data-filter="date"]').closest('.filter-item').hide()
			calendarIsVisible = true
			mapIsVisible = false
			$('.help-title').show()
			$('.help-title-map').hide()
			$('body.events.index #collection-list-filters').filteredList 'disableScrolling'
			if not calendarCreated
				calendarCreated = true
				window.createCalendar();
				# When the user clicks on the calendar day
				$('#calendar-canvas').off('click.eventsCalendar').on 'click.eventsCalendar', '.cal-day-link', (e) ->
					date = $(this).data('date')
					$('#collection-list-filters').filteredList('setDates', [date, date])
					$('#toggle-events-view a[href="#list-view"]').click()
					false

				# When the filters change
				$('#collection-list-filters').off('filters:changed.eventsCalendar').on 'filters:changed.eventsCalendar', () ->
					if calendarIsVisible
						$('#calendar-canvas').eventsCalendar 'loadEvents'
			else
				$('#calendar-canvas').eventsCalendar 'loadEvents'
		else
			$('#pdf-export').data('url', '/events.pdf');
			$('.dates-range-filter').slideDown()
			$('.dates-pref').slideDown()
			$('.collection-list-description').find('[data-filter="date"]').closest('.filter-item').show()
			mapIsVisible = false
			calendarIsVisible = false
			$('.help-title').show()
			$('.help-title-map').hide()
			$('.table-cloned-fixed-header').show()
			$('body.events.index #collection-list-filters').filteredList 'enableScrolling'

	map = null
	markersArray = []
	events = null
	markerCluster = false

	initializeMap = ->
		if not map
			mapOptions = {
				zoom: 5,
				mapTypeId: google.maps.MapTypeId.ROADMAP
			}
			map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions)

			map.setOptions {styles: window.MAP_STYLES}
		else
			google.maps.event.trigger map, 'resize'
		fecthAndPlaceMarkers()

	$(document).on 'events-filter:changed', (e) ->
		if mapIsVisible
			fecthAndPlaceMarkers()


	fecthAndPlaceMarkers = ->
		params = $('#collection-list-filters').filteredList('getFilters');
		params.push {name: 'per_page', value: '500'}
		$.getJSON '/events/map.json', params, (events) ->
			placeMarkers(map, events)

	window.placeMarkers = (map, events) ->
		if map
			for marker in markersArray
				marker.setMap null

			markersArray = []

			bounds = new google.maps.LatLngBounds()

			pinImage = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|de4d43",
				new google.maps.Size(21, 34),
				new google.maps.Point(0,0),
				new google.maps.Point(10, 34));

			for event in events
				if event.place? and event.place.latitude? and event.place.latitude != ''
					placeLocation = new google.maps.LatLng(event.place.latitude,event.place.longitude)
					marker = new google.maps.Marker({
						draggable:false,
						icon: pinImage,
						title: event.place.name,
						animation: google.maps.Animation.DROP,
						position: placeLocation
					})
					markersArray.push marker

					marker.theInfowindow = new google.maps.InfoWindow {
							content: $('<div>')
											.append($('<b>').append(if event.campaign? then event.campaign.name else ''))
											.append($('<br>')).append(event.formatted_date)
											.append($('<br>')).append(if event.place? then event.place.name + '<br>' + event.place.formatted_address else '')
											.append($('<br>')).append($('<a>', {'href': event.links.show}).text('View Details'))
											.append('\xA0\xA0').append($('<a>', {'href': event.links.edit, 'data-remote': true}).text('Edit Event')).html()
					}

					google.maps.event.addListener marker, 'click', () ->
						for marker in markersArray
							marker.theInfowindow.close()

						this.theInfowindow.open map, this

					# Automatically center/zoom the map according to the markers :)
					bounds.extend marker.position


			if events.length > 0
				zoomChangeBoundsListener = google.maps.event.addListener(map, 'bounds_changed', (event) ->
						google.maps.event.removeListener(zoomChangeBoundsListener)
						if (this.getZoom() > 13 && this.initialZoom == true)
							this.setZoom 13
							this.initialZoom = false
				)
				map.initialZoom = true;
				map.fitBounds bounds

				if markerCluster
					markerCluster.clearMarkers()

				markerCluster = new MarkerClusterer(map, markersArray, {styles: clusterStyles = [
						{
							textColor: 'white',
							url: '<%= asset_path('small-bubble.png'); %>',
							height: 50,
							textSize: 11,
							width: 50
						},
						{
							textColor: 'white',
							url: '<%= asset_path('medium-bubble.png'); %>',
							height: 50,
							textSize: 11,
							width: 50
						},
						{
							textColor: 'white',
							url: '<%= asset_path('big-bubble.png'); %>',
							height: 50,
							textSize: 11,
							width: 50
						}
					];

				})


	if $('#map-view').hasClass('active')
		mapIsVisible = true
		initializeMap()
