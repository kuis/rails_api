- remote ||= false
= simple_form_for(resource, remote: remote || false) do |f|
  = f.error_notification

  .form-inputs
    = f.simple_fields_for :user do |uf|
      .row-fluid.users
        .span6
          = uf.input :first_name, input_html: {class: 'input-large'}, :autofocus => true
        .span6
          = uf.input :last_name, input_html: {class: 'input-large'}

      - if can?(:super_update, resource)
        .row-fluid.users
            = f.association :teams, collection: company_teams.active.all, input_html: {class: 'input-xxlarge chosen-enabled'}
      .row-fluid.users
        = uf.input :email, input_html: {class: 'input-xxlarge'}
      .row-fluid.users
        = uf.input :phone_number, input_html: {class: 'input-xxlarge'}

      - if can?(:super_update, resource)
        .row-fluid.users-teams-roles
          = f.input :role_id, as: :select, collection: current_company.roles.active, input_html: {class: 'input-large chosen-enabled'}
      - if resource.id == current_company_user.id || can?(:super_update, resource)
        .row-fluid.users
            = uf.input :password, input_html: {class: 'input-xxlarge', minlength: 8, maxlength: 128}, hint: 'Password must contain at least 8 characters, at least 1 number, at least 1 lowercase character (a-z) and at least 1 uppercase character (A-Z)'
        .row-fluid.users
            = uf.input :password_confirmation, input_html: {class: 'input-xxlarge'}
        .row-fluid.users
          = uf.input :street_address, label: 'Address', input_html: {class: 'input-xxlarge'}
        .row-fluid.users
          = uf.input :unit_number, label: false, input_html: {class: 'input-xxlarge'}
        .row-fluid.users
          .span6
            = uf.input :country, required: true, input_html: {class: 'input-large chosen-enabled'}
          .span6
            = uf.input :city, required: true, input_html: {class: 'input-large'}
        .row-fluid.users
          .span6
            = uf.input :state, collection: (resource.country.present? ? Country.new(resource.country).states.map{|k, info| [info['name'],k]} : []), required: true, input_html: {class: 'input-large chosen-enabled'}
          .span6
            = uf.input :zip_code, input_html: {class: 'input-large'}
        .row-fluid.users-teams-roles
          = uf.input :time_zone, required: true, input_html: {class: 'input-large chosen-enabled'}
  .form-actions
    = f.button :submit, 'Save', class: 'btn btn-primary', disable_with: 'Please wait...'
    = "&nbsp;".html_safe
    = f.button :button, 'Cancel', class: 'btn btn-cancel'

- unless resource.time_zone.present?
  javascript:
    $('#company_user_user_attributes_time_zone').set_timezone({'mappings':#{ActiveSupport::TimeZone::MAPPING.invert.to_json.html_safe}});

coffee:
  $('#company_user_user_attributes_country').change () ->
    $.get '/countries/states.json', {country: $(this).val()}, (response) ->
      states = $('#company_user_user_attributes_state')
      val = states.val()
      states.html('<option></option>')
      if response.states
        for state in response.states
          option = $('<option>').val(state.id).html(state.name)
          if val is state.id
            option.attr('selected', 'selected')
          states.append(option)
      states.trigger('liszt:updated')
