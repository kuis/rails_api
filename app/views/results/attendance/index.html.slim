
#attendance-report.row-fluid.with-details-close-bar
  = resource_details_bar("You are viewing the Attendance by Neighbourhood report. Click to close.")
  
  .details_box.padding-top-close-bar
    #attendance-left-column.pull-left
      h3 ATTENDANCE BY NEIGHBOURHOOD

      = simple_form_for :report, url: results_attendance_path, remote: true do |f|

        = f.input :campaign_id, label: '1. Choose a campaign', collection: campaigns_list_for_dropdown, selected: params[:report].try(:[], :campaign_id), include_blank: '', required: true, input_html: { class: 'chosen-enabled no-validate', data: { placeholder: "Choose a campaign" } }

        = f.input :state, label: '2. Choose a state', collection: @states, selected: params[:report].try(:[], :state), include_blank: '', required: true, input_html: { class: 'chosen-enabled no-validate', data: { placeholder: "Choose a state" } }

        = f.input :city, label: '2. Choose a city', collection: [], selected: params[:report].try(:[], :city), include_blank: '', required: true, input_html: { class: 'chosen-enabled no-validate', data: { placeholder: "Choose a city" } }

        #customize-fields.hide
          .attendance-slider
            label.control-label # Attendees
            .attendees-range-labels
              span LOW
              span MEDIUM
              span HIGH
              .separator.left-separator
              .separator.right-separator
            #attendees-range-slider
              .attendees-range-bar
                .point-range.left-point
                .point-range.right-point
          label.control-label Color Overlay
          input#report_color.color-box type="color"
          = f.input 'attendees[min]', as: :hidden
          = f.input 'attendees[max]', as: :hidden

    #attendance-right-column
      #attendance-map-canvas.google-map

    .clearfix

javascript:

  $('#attendees-range-slider').rangeSlider({
    bounds: {min: 20, max: 210},
    defaultValues: { min: 20, max: 210 },
    arrows: false,
    step: 1,
    range: 1
  }).on("userValuesChanged", function(e, data) {
    $.each(arrayPolygon, function(index, item) {
      if (item.quantity >= data.values.min && item.quantity <= data.values.max ) {
        item.polygon.setMap(window.attendanceMap);      
      } else {
        item.polygon.setMap(null);
      }
    });
  });

  var states = $('#report_state'),
      cities = $('#report_city'),
      colorp = $('#report_color'),
      campaigns = $('#report_campaign_id');
  
  states.change(function(){
    cities.html('<option></option>');
    if ($(this).val()) {
      $.get('/countries/US/cities.json', {state: $(this).val()}, function(response) {
        var val = cities.val();
        for (i=0; i< response.length; i++){
          city = response[i];
          option = $('<option>').val(city).html(city);
          if (val == city) {
            option.attr('selected', 'selected')
          }
          cities.append(option);
        }
        cities.trigger('liszt:updated');
      });
    }
  });

  loadReport = function(){
    if (cities.val() && states.val() && campaigns.val()){
      $.get('#{results_attendance_map_path(format: :js)}', {
        campaign: campaigns.val(), 
        color: ($('#customize-fields').hasClass('hide') ? null : colorp.val()), 
        state: states.val(), 
        city: cities.val()});
    }
  }

  cities.change(loadReport);
  campaigns.change(loadReport);

  $('#report_state').change();


  $('.color-box').spectrum({
      showInput: true,
      preferredFormat: "hex",
      showPalette: true,
      showSelectionPalette: true,
      change: function(color){
        changeColorAllPolygon(color.toHexString(), color.toHsv());
      }
  });
  //$('.color-box').colpick({
  //  colorScheme:'dark',
  //  layout:'rgbhex',
  //  color:'347B9B',
  //  onSubmit:function(hsb,hex,rgb,el) {
  //    $(el).css('background-color', '#'+ hex);
  //    $(el).colpickHide();
  //    changeColorAllPolygon(hex,hsb);
  //  }
  //}).css('background-color', '#347B9B');

  function changeColorAllPolygon(color, hsb) {
    $('.color-box').spectrum("set", color);
    var arrayColor = generateColorList(color,hsb);
    //$('.ui-rangeSlider-handle').css({
    //  backgroundColor: '#' + arrayColor[9],
    //  borderColor: '#' + arrayColor[6]});

    $.each(arrayPolygon, function(index, value) {
      value.polygon.setOptions({fillColor: '#' + arrayColor[selectColorIndex(value.quantity)], fillOpacity: 0.5});
    });
  }

  function generateColorList(color, hsb) {
    var arrayColor = [];
    if (hsb.s < 100) {
      hsb.s = 100;
    }
    for (var i = 0; i < 10; i++){
      arrayColor.push(tinycolor(hsb).toHex(hsb));
      hsb.s = hsb.s - 5;
    }
    return arrayColor;
  }

  function selectColorIndex(value) {
    var t = (valueMax - valueMin) / 10;
    if (value != 0 && t != 0) {
      var colorIndex = Math.floor(value / t);
      if (value == valueMax)
        return 0;
      else
        return 10 - Math.floor(value / t);
    }
    else
      return 9;
  }

  function hexc(colorval) {
    var color;
    var parts = colorval.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
    delete(parts[0]);
    for (var i = 1; i <= 3; ++i) {
        parts[i] = parseInt(parts[i]).toString(16);
        if (parts[i].length == 1) parts[i] = '0' + parts[i];
    }
    color = '#' + parts.join('');
    console.log(color);
    return color;
  }