- content_for :alerts
  div class="alert collection-list-description"
    a.close data-dismiss="alert"
    .filter-label

.sidebar.collapsed#resource-filter-column
  #collection-list-filters
  #save-filters-btn.a.btn.btn-primary Save
.main

  .pull-left
    = button_to 'Create', new_event_path, {method: :get, remote: true, class: 'btn btn-primary', :id => 'new-event-btn'} if can? :create, Event

  .text-right
    button.btn.download.xlsx-download-link data-url="#{events_path(format:"xls")}" title="Download"
    - if can?(:view_map, Event) || can?(:view_list, Event) || can?(:view_calendar, Event)
      #toggle-events-view.btn-group
        - if can?(:view_list, Event)
          a.btn.active.list href="#list-view" data-toggle="tab" title="List View"
        - if can?(:view_calendar, Event)
          a.btn.calendar href="#calendar-view" data-toggle="tab" title="Calendar View"
        - if can?(:view_map, Event)
          a.btn.map href="#map-view" data-toggle="tab" title="Map View"

  .tab-content
    - if can?(:view_list, Event)
      #list-view.tab-pane.active
        .link-list
          ul#events-list

    - if can?(:view_calendar, Event)
      #calendar-view.tab-pane
        #calendar-canvas

    - if can?(:view_map, Event)
      #map-view class="tab-pane #{can?(:view_list, Event) ? '' : 'active'}"
        #map-canvas.google-map

= render partial: 'help_tutorial'

- if can?(:view_list, Event)
  javascript:
    $('#collection-list-filters').filteredList({
      'source': '#{items_path(controller: :events)}',
      'filtersUrl': '#{filters_path(controller: :events)}',
      'listContainer' : '#events-list',
      'sorting': 'start_at',
      'sorting_dir': 'asc',
      'includeCalendars': true,
      'calendarHighlights': #{calendar_highlights.to_json.html_safe},
      'selectDefaultDate': false,
      'selectDefaultDateRange': false,
      'includeAutoComplete': true,
      'autoCompletePath': '#{autocomplete_events_path(format: :json)}',
      'defaultParams': [{name: 'status[]', value: 'Active'}, {name: 'start_date', value:'#{Time.zone.now.strftime("%m/%d/%Y")}'}, {name: 'end_date', value:'#{(Time.zone.now + 10.years).strftime("%m/%d/%Y")}'}],
      'clearFilterParams': [{name: 'status[]', value: 'Active'}],
      'onChange': function(filterBox){
        $(document).trigger('events-filter:changed')
      },
      'onItemsLoad': function(response, page){
        if (response.find('div[data-content="filters-description"]').length > 0){
          $('.collection-list-description .filter-label').html(response.find('div[data-content="filters-description"]'))
        }
      }
    });

javascript:
  $(document).on('events:change', function(){
    $.get('#{calendar_dates_events_path(format: :json)}', function(response) {
      $('#collection-list-filters').filteredList('setCalendarHighlights', response)
    })
  })
