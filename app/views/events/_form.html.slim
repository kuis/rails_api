- remote ||= false
= simple_form_for(@event, remote: remote || false) do |f|
  = f.error_notification

  .form-inputs
    = f.association :campaign
    .row-fluid
      .span6
        = f.error :start_at
        = f.input :start_date, :as => :date_picker, inline: true
        = f.input :start_time, :as => :time_picker, inline: true

      .span6
        = f.input :end_date, :as => :date_picker, inline: true
        = f.error :end_at
        = f.input :end_time, :as => :time_picker

    .row-fluid
      = f.error :place
      = f.input :place_reference, :as => :location, label: 'Location'
      = f.association :users, label: 'Staff', label_method: :full_name, input_html: {class: 'input-large'}, collection: current_user.company.users.active.all


  .form-actions
    = f.button :submit, class: 'btn btn-primary'
    = "&nbsp;".html_safe
    = f.button :button, 'Cancel', class: 'btn btn-cancel'

coffee:
  val = $('#calendar_start_date').text()
  $('#calendar_start_date').datepicker {
    altField: '#event_start_date',
    defaultDate: $('#calendar_start_date').data('date')
  }

  $('#calendar_end_date').datepicker {
    altField: '#event_end_date',
    defaultDate: $('#calendar_end_date').data('date')
  }

  $('#event_user_ids').select2();


  input = $('.modal .places-autocomplete')[0]
  locationAutocomplete = new google.maps.places.Autocomplete(input);


  google.maps.event.addListener(locationAutocomplete, 'place_changed', () ->
    place = locationAutocomplete.getPlace()
    if not place.geometry
      # Inform the user that the place was not found and return.
      alert 'Place not found'
      return

    $($(input).data('hidden')).val "#{place.reference}||#{place.id}"
  )