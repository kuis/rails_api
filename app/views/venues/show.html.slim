.row-fluid.with-details-close-bar
  = resource_details_bar("You are viewing venue details. Click to close.", collection_path)

  .details_box
    - unless resource.latitude.nil?
      #venue-map-canvas.google-map data-latitude="#{resource.latitude}" data-longitude="#{resource.longitude}"
            b= resource.name
            br>/
            = place_address(resource.is_a?(Venue) ? resource.place : resource)

    - venue_address = resource.formatted_address.present? ? resource.formatted_address : place_address(resource.place, false, ', ', ', ')
    h2= resource.name
    .row-fluid
      .place-data
        = venue_address
        - if resource.formatted_address.present?
          br>/
        = resource.formatted_phone_number
        - if resource.website
          .link
            = place_website(resource.website)
        = resource.price_level.times.map{ '$' }.join
        = " "
        = resource.types_without_establishment.map{|type| t("venue_types.#{type}") }.join(', ')

        - if resource.place.td_linx_code
          br>/
          = 'TD Linx Code ' + resource.place.td_linx_code
      - if resource.opening_hours
        .time-data
          = place_opening_hours_formatted(resource.opening_hours)
      / .description-data
      /   p Cocktails “made with mixers like Hawaiian Punch and Tang”, beer “served in a brown paper bag” and “junk food” like “deep-fried Twinkies and chili cheese tater tots” conjure up “college days” at this “kitschy” SoMa bar with a “trailer park theme”; it may be “gimmicky” and the “dive bar decor” is a little “rough around the edges”, but most are buttered up by the “super-fun” vibe.º

      // The is info will be displayed on the fixed bar when the window is scolled down to this position
      .details-bar-info
        h3= resource.name
        br>/
        = venue_address

      - if resource.persisted?
        .tools-icons
          = link_to '', select_areas_venue_path(resource), remote: true, class: 'add-area-venue icon-plus-sign'
        #venue-areas.row-fluid
          = render partial: 'areas', locals: {areas: resource.place.areas}

- if resource.events_count.present? && resource.events_count > 0
  - if can?(:view_score, resource) || can?(:view_kpis, resource)
    .details_box
      - if resource.persisted?
        .venue-overall
          .row-fluid
            .span6
              - if can?(:view_score, resource)
                #venue-score
                  span= resource.score
                  | VENUE SCORE
                #venue-score-narrative
                  = venue_score_narrative(resource)

            .span6
              - if can?(:view_kpis, resource)
                #overall-venue-stats.kpi-trends-stats.text-right
                  .live-stats
                    span= resource.events_count
                    = (resource.events_count == 1 ? " Event" : " Events")
                    br>/
                    span= number_with_delimiter(resource.promo_hours)
                    = (resource.promo_hours == 1 ? " Promo Hour" : " Promo Hours")
                    br>/
                    span= number_with_delimiter(resource.impressions)
                    = (resource.impressions == 1 ? " Impression" : " Impressions")
                    br>/
                    span= number_with_delimiter(resource.interactions)
                    = " Interactions"
                    br>/
                    span= number_with_delimiter(resource.sampled)
                    = " Sampled"
                  .live-stats-2
                    span= number_with_delimiter(resource.avg_impressions.round)
                    = " Impressions/Event"
                    br>/
                    span= number_with_delimiter(resource.avg_impressions_hour.round)
                    = " Impressions/Promo Hour"
                    br>/
                    span= number_to_currency(resource.avg_impressions_cost, precision: 2)
                    = " Cost/Impression"

      - if resource.persisted? && can?(:view_kpis, resource)
        #demographics.row-fluid
          .span6
            #gender-graph.row-fluid
              = gender_graph(resource.overall_graphs_data[:gender])
            .row-fluid
              #overall-age-graph
          .span6
            #overall-ethnicity-graph

  - if can?(:view_trends_day_week, resource)
    #venue-trends-week.details_box
      h3 TRENDS BY DAY OF WEEK
      #venue-trends-by-day-narrative= venue_trend_week_day_narrative(resource)
      #trends-day-week-graph

- if can?(:view_events, resource)
  #venue-events.details_box
    h3 EVENTS
    - if can?(:show, Venue) && can?(:create, Event)
      .pull-left
        - if resource.persisted?
          = link_to 'Create', new_venue_event_path(resource), {remote: true, class: 'btn btn-primary', :id => 'new-event-btn'}
        - else
          = link_to 'Create', new_event_path(event: {place_reference: "#{resource.place.reference}||#{resource.place.place_id}"}, place_reference_display_name: "#{resource.place.name}, #{resource.place.city}, #{resource.place.state}"), {remote: true, class: 'btn btn-primary', :id => 'new-event-btn'}
    - if resource.persisted?
      #venue-events-container
        = render partial: 'upcoming_events'

- if can?(:view_photos, resource) && resource.photos.count > 0
  #venue-photos.details_box
    h3 GALLERY
    .large-photo-list
      ul.thumbnails#photos-thumbs
        - resource.photos.each do |photo|
          - if photo.is_a?(AttachedAsset)
            = render partial: 'results/photos/photo', locals: {photo: photo}
          - else
            li.span2.google-image
              div.thumbnail-container.thumbnail
                a.fancybox data-fancybox-type='image' href="https://maps.googleapis.com/maps/api/place/photo?maxheight=700&maxwidth=700&photoreference=#{photo[:photo_reference]}&sensor=true&key=#{GOOGLE_API_KEY}" rel='photo-gallery'
                  = image_tag "https://maps.googleapis.com/maps/api/place/photo?maxwidth=180&photoreference=#{photo[:photo_reference]}&sensor=true&key=#{GOOGLE_API_KEY}"

- if can?(:view_comments, resource) && resource.reviews.count > 0
  #venue-comments.details_box
    h3 COMMENTS
    - resource.reviews.each do |review|
      .venue-review
        - unless review.is_a?(Comment)
          .review-author-name= review.author_name
          .review-rating= rating_stars(review.rating)
          .review-date= time_ago_in_words(DateTime.strptime(review.time.to_s,'%s'))
          .review-text= review.text
        - else
          .review-author-name= review.user_full_name
          .review-date= time_ago_in_words(review.created_at)
          .review-text= review.content

= render partial: 'help_tutorial'

javascript:
  $(document).ready(function() {
    $(this).scrollTop(400);
  });

- if resource.persisted?
  - if can?(:view_kpis, resource)
    javascript:
      #{render partial: 'shared/ethnicity_graph', locals:{data: resource.overall_graphs_data[:ethnicity], container: '#overall-ethnicity-graph'}}

      #{render partial: 'shared/age_graph', locals:{data: resource.overall_graphs_data[:age], container: '#overall-age-graph'}}


  - if can?(:view_trends_day_week, resource)
    javascript:
      $('#trends-day-week-graph').highcharts({
          credits: { enabled: false },
          chart: {marginTop: 50 },
          title: {
              text: null
          },
          xAxis: {
              categories: ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'],
              lineColor: '#D1D1D1',
              tickWidth: 0,
              labels: {
                style: {
                  color: '#D1D1D1'
                }
              },
          },
          yAxis: [{
              title: {
                  text: null
              },
              gridLineColor: 'transparent',
              lineWidth: 1,
              lineColor: '#D1D1D1',
              tickWidth: 1,
              plotLines: [{
                  value: 0,
                  width: 1,
                  color: '#808080'
              }],
              labels: {
                style: {
                  color: '#D1D1D1'
                }
              },
              min: 0,
              maxPadding: 0.2
          },{
              title: {
                  text: null
              },
              gridLineColor: 'transparent',
              lineWidth: 1,
              lineColor: '#D1D1D1',
              tickWidth: 1,
              plotLines: [{
                  value: 0,
                  width: 1,
                  color: '#808080'
              }],
              labels: {
                format: '${value}',
                style: {
                  color: '#D1D1D1'
                }
              },
              opposite: true,
              min: 0,
              maxPadding: 0.2
          }],
          plotOptions: {
              series: {
                  marker: {
                      fillColor: '#FFFFFF',
                      lineWidth: 2,
                      lineColor: null, // inherit from series
                      radius: 6,
                      symbol: 'circle'
                  }
              }
          },
          tooltip: {
              headerFormat: '',
              pointFormat: '{point.y}',
              borderWidth: 0,
              borderColor: '#FFF',
              backgroundColor: 'transparent',
              shadow: false,
              style: {
                  fontSize: '14px'
              },
              positioner: function( labelWidth, labelHeight, point){
                  return {
                    x: point.plotX + this.chart.plotLeft - (labelWidth/2),
                    y: point.plotY + this.chart.plotTop - labelHeight - 10
                  };
              },
              formatter: function() {
                  if (this.series.name =='Cost/Impression'){
                    return '<span style="color:'+this.series.color+'">$'+this.y +'</span>';
                  }else{
                    return '<span style="color:'+this.series.color+'">'+this.y +'</span>';
                  }
              }
          },
          legend: {
              floating: true,
              borderWidth: 0,
              y: -10,
              align: 'right',
              verticalAlign: 'top',
              itemStyle: { fontSize: '10px', color: '#3E9CCF' }
          },
          series: [
            {
              name: 'Impressions/promo hour',
              data: #{resource.overall_graphs_data[:impressions_promo].values.map(&:round).to_json.html_safe},
              color: '#3D9CCA'
            },
            {
              name: 'Cost/Impression',
              data: #{resource.overall_graphs_data[:cost_impression].values.map(&:round).to_json.html_safe},
              color: '#94D6ED',
              yAxis: 1
            }
          ]
      });

  javascript:
    $(document).on('areas:change', function(){
      $.get('#{areas_venue_path(resource, format: :js)}');
    });
