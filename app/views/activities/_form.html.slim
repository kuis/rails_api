#form-container
    = simple_form_for [resource.new_record? ? parent : nil, resource], remote: true do |f|
      - if activity_types.any?
        = f.error_notification
        = resource.errors.full_messages.join("<br />").html_safe

        .form-inputs
          .large-inputs
            = f.input :activity_type_id, collection: activity_types, input_html: {class: 'chosen-enabled'}, disabled: (resource.new_record? ? false : true)

        - if resource.activity_type.present?
          .large-inputs
            - if resource.activitable_type == 'Venue'
              = f.input :campaign_id, collection: resource.activity_type.campaigns.active.accessible_by_user(current_company_user).order(:name), input_html: {class: 'chosen-enabled'}
          - resource.results_for_type.each do |result|
            = f.simple_fields_for :results, result do |rf|
              .large-inputs
                = rf.input :value, result.form_field.field_options(result)
                = rf.input :form_field_id, as: :hidden, wrapper: false
          .row-fluid
            .span8
              = f.input :company_user_id, label: 'User', collection: assignable_users, input_html: {class: 'chosen-enabled'}
            .span4
              = f.input :activity_date, input_html: {class: 'field-type-date', value: resource.activity_date.try(:to_s, :slashes)}, as: :date_picker, label: 'Date'

          .form-actions
            = f.button :submit, id: 'create-activity-btn', class: 'btn btn-primary', disable_with: 'Please wait...'
            = "&nbsp;".html_safe
            = f.button :button, 'Cancel', class: 'btn btn-cancel'
        - else
          .form-actions
            = f.button :button, 'Cancel', class: 'btn btn-cancel'
      - else
        p There are not activity types available.

        .form-actions
          = f.button :button, 'Cancel', class: 'btn btn-cancel'

javascript:
  $('#activity_activity_type_id').off('change').on('change', function(e){
    if ( $(this).val() ){
      $('#form-container').load("#{url_for([:form, resource.activitable, :activities])}?activity[activity_type_id]="+$(this).val());
    }
  });

  $('#activity_campaign_id').off('change').on('change', function() {
    brands = $('.form-field-brand');
    marques = $('select.form-field-marque');
    if (selectedOption = this.value) {
      $.get('/campaigns/'+selectedOption+'/brands.json', function(options) {
        brands.empty();
        marques.empty();
        brands.append($("<option>", {value: '', text: '', selected: true}));
        marques.select2('data', null, false);
        for(var i in options) {
            brands.append($("<option>", {
                value: options[i].id,
                text: options[i].name
            }));
        }
        brands.trigger('liszt:updated')
      });
    }
  });

  $('.form-field-brand').off('change').on('change', function() {
    if (selectedOption = this.value) {
      $.get('/brands/'+selectedOption+'/marques.json', function(options) {
        marques = $('select.form-field-marque');
        marques.empty().select2('destroy');
        for(var i in options) {
            marques.append($("<option>", {
                value: options[i].id,
                text: options[i].name
            }));
        }
        marques.select2();
      });
    }
  });

  $('select.form-field-marque').select2();
